{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AA+kBA,MAAM,CAAN,IAAY,OAKX;AALD,WAAY,OAAO;IACjB,0BAAe,CAAA;IACf,gCAAqB,CAAA;IACrB,4BAAiB,CAAA;IACjB,gCAAqB,CAAA;AACvB,CAAC,EALW,OAAO,KAAP,OAAO,QAKlB","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport declare type PresentationOption = 'badge' | 'sound' | 'alert';\n\nexport interface PushNotificationsPlugin {\n  /**\n   * Register the app to receive push notifications.\n   *\n   * This method will trigger the `'registration'` event with the push token or\n   * `'registrationError'` if there was a problem. It does not prompt the user for\n   * notification permissions, use `requestPermissions()` first.\n   *\n   * @since 1.0.0\n   */\n  register(): Promise<void>;\n  /**\n   * Unregister the app from push notifications.\n   *\n   * This will delete a firebase token on Android, and unregister APNS on iOS.\n   *\n   * @since 5.0.0\n   */\n  unregister(): Promise<void>;\n  /**\n   * Get a list of notifications that are visible on the notifications screen.\n   *\n   * @since 1.0.0\n   */\n  getDeliveredNotifications(): Promise<DeliveredNotifications>;\n  /**\n   * Remove the specified notifications from the notifications screen.\n   *\n   * @since 1.0.0\n   */\n  removeDeliveredNotifications(\n    delivered: DeliveredNotifications,\n  ): Promise<void>;\n  /**\n   * Remove all the notifications from the notifications screen.\n   *\n   * @since 1.0.0\n   */\n  removeAllDeliveredNotifications(): Promise<void>;\n  /**\n   * Create a notification channel.\n   *\n   * Only available on Android O or newer (SDK 26+).\n   *\n   * @since 1.0.0\n   */\n  createChannel(channel: Channel): Promise<void>;\n  /**\n   * Delete a notification channel.\n   *\n   * Only available on Android O or newer (SDK 26+).\n   *\n   * @since 1.0.0\n   */\n  deleteChannel(args: { id: string }): Promise<void>;\n  /**\n   * List the available notification channels.\n   *\n   * Only available on Android O or newer (SDK 26+).\n   *\n   * @since 1.0.0\n   */\n  listChannels(): Promise<ListChannelsResult>;\n  /**\n   * Check permission to receive push notifications.\n   *\n   * On Android 12 and below the status is always granted because you can always\n   * receive push notifications. If you need to check if the user allows\n   * to display notifications, use local-notifications plugin.\n   *\n   * @since 1.0.0\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Request permission to receive push notifications.\n   *\n   * On Android 12 and below it doesn't prompt for permission because you can always\n   * receive push notifications.\n   *\n   * On iOS, the first time you use the function, it will prompt the user\n   * for push notification permission and return granted or denied based\n   * on the user selection. On following calls it will get the current status of\n   * the permission without prompting again.\n   *\n   * @since 1.0.0\n   */\n  requestPermissions(): Promise<PermissionStatus>;\n  /**\n   * Called when the push notification registration finishes without problems.\n   *\n   * Provides the push notification token.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'registration',\n    listenerFunc: (token: Token) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when the push notification registration finished with problems.\n   *\n   * Provides an error with the registration problem.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'registrationError',\n    listenerFunc: (error: RegistrationError) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when the device receives a push notification.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'pushNotificationReceived',\n    listenerFunc: (notification: PushNotificationSchema) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when an action is performed on a push notification.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'pushNotificationActionPerformed',\n    listenerFunc: (notification: ActionPerformed) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    even: Events,\n    cb: (data: CallKitParams) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'onIceCandidate',\n    cb: (data: { iceCandidate: RTCIceCandidate }) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'onConnectionStateChange',\n    cb: (data: { connectionState: RTCIceConnectionState }) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'onDataReceived',\n    cb: (data: { dataReceived: string }) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'videoIntentConfirm',\n    cb: (data: { confirm: string }) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'videoIntenthandle',\n    cb: (data: { contact: string; callCapability: string }) => void,\n  ): Promise<PluginListenerHandle>;\n\n  /**\n   * Remove all native listeners for this plugin.\n   *\n   * @since 1.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\nexport interface PushNotificationSchema {\n  /**\n   * The notification title.\n   *\n   * @since 1.0.0\n   */\n  title?: string;\n  /**\n   * The notification subtitle.\n   *\n   * @since 1.0.0\n   */\n  subtitle?: string;\n  /**\n   * The main text payload for the notification.\n   *\n   * @since 1.0.0\n   */\n  body?: string;\n  /**\n   * The notification identifier.\n   *\n   * @since 1.0.0\n   */\n  id: string;\n  /**\n   * The notification tag.\n   *\n   * Only available on Android (from push notifications).\n   *\n   * @since 4.0.0\n   */\n  tag?: string;\n  /**\n   * The number to display for the app icon badge.\n   *\n   * @since 1.0.0\n   */\n  badge?: number;\n  /**\n   * It's not being returned.\n   *\n   * @deprecated will be removed in next major version.\n   * @since 1.0.0\n   */\n  notification?: any;\n  /**\n   * Any additional data that was included in the\n   * push notification payload.\n   *\n   * @since 1.0.0\n   */\n  data: any;\n  /**\n   * The action to be performed on the user opening the notification.\n   *\n   * Only available on Android.\n   *\n   * @since 1.0.0\n   */\n  click_action?: string;\n  /**\n   * Deep link from the notification.\n   *\n   * Only available on Android.\n   *\n   * @since 1.0.0\n   */\n  link?: string;\n  /**\n   * Set the group identifier for notification grouping.\n   *\n   * Only available on Android. Works like `threadIdentifier` on iOS.\n   *\n   * @since 1.0.0\n   */\n  group?: string;\n  /**\n   * Designate this notification as the summary for an associated `group`.\n   *\n   * Only available on Android.\n   *\n   * @since 1.0.0\n   */\n  groupSummary?: boolean;\n}\nexport interface ActionPerformed {\n  /**\n   * The action performed on the notification.\n   *\n   * @since 1.0.0\n   */\n  actionId: string;\n  /**\n   * Text entered on the notification action.\n   *\n   * Only available on iOS.\n   *\n   * @since 1.0.0\n   */\n  inputValue?: string;\n  /**\n   * The notification in which the action was performed.\n   *\n   * @since 1.0.0\n   */\n  notification: PushNotificationSchema;\n}\nexport interface Token {\n  /**\n   * On iOS it contains the APNS token.\n   * On Android it contains the FCM token.\n   *\n   * @since 1.0.0\n   */\n  value: string;\n}\nexport interface RegistrationError {\n  /**\n   * Error message describing the registration failure.\n   *\n   * @since 4.0.0\n   */\n  error: string;\n}\nexport interface DeliveredNotifications {\n  /**\n   * List of notifications that are visible on the\n   * notifications screen.\n   *\n   * @since 1.0.0\n   */\n  notifications: PushNotificationSchema[];\n}\nexport interface Channel {\n  /**\n   * The channel identifier.\n   *\n   * @since 1.0.0\n   */\n  id: string;\n  /**\n   * The human-friendly name of this channel (presented to the user).\n   *\n   * @since 1.0.0\n   */\n  name: string;\n  /**\n   * The description of this channel (presented to the user).\n   *\n   * @since 1.0.0\n   */\n  description?: string;\n  /**\n   * The sound that should be played for notifications posted to this channel.\n   *\n   * Notification channels with an importance of at least `3` should have a\n   * sound.\n   *\n   * The file name of a sound file should be specified relative to the android\n   * app `res/raw` directory.\n   *\n   * @since 1.0.0\n   * @example \"jingle.wav\"\n   */\n  sound?: string;\n  /**\n   * The level of interruption for notifications posted to this channel.\n   *\n   * @default `3`\n   * @since 1.0.0\n   */\n  importance?: Importance;\n  /**\n   * The visibility of notifications posted to this channel.\n   *\n   * This setting is for whether notifications posted to this channel appear on\n   * the lockscreen or not, and if so, whether they appear in a redacted form.\n   *\n   * @since 1.0.0\n   */\n  visibility?: Visibility;\n  /**\n   * Whether notifications posted to this channel should display notification\n   * lights, on devices that support it.\n   *\n   * @since 1.0.0\n   */\n  lights?: boolean;\n  /**\n   * The light color for notifications posted to this channel.\n   *\n   * Only supported if lights are enabled on this channel and the device\n   * supports it.\n   *\n   * Supported color formats are `#RRGGBB` and `#RRGGBBAA`.\n   *\n   * @since 1.0.0\n   */\n  lightColor?: string;\n  /**\n   * Whether notifications posted to this channel should vibrate.\n   *\n   * @since 1.0.0\n   */\n  vibration?: boolean;\n}\n/**\n * The importance level. For more details, see the [Android Developer Docs](https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT)\n * @since 1.0.0\n */\nexport declare type Importance = 1 | 2 | 3 | 4 | 5;\n/**\n * The notification visibility. For more details, see the [Android Developer Docs](https://developer.android.com/reference/androidx/core/app/NotificationCompat#VISIBILITY_PRIVATE)\n * @since 1.0.0\n */\nexport declare type Visibility = -1 | 0 | 1;\nexport interface ListChannelsResult {\n  /**\n   * List of all the Channels created by your app.\n   *\n   * @since 1.0.0\n   */\n  channels: Channel[];\n}\nexport interface PermissionStatus {\n  /**\n   * Permission state of receiving notifications.\n   *\n   * @since 1.0.0\n   */\n  receive: PermissionState;\n}\n/**\n * @deprecated Use 'Channel`.\n * @since 1.0.0\n */\nexport declare type NotificationChannel = Channel;\n/**\n * @deprecated Use `ListChannelsResult`.\n * @since 1.0.0\n */\nexport declare type NotificationChannelList = ListChannelsResult;\n/**\n * @deprecated Use `PushNotificationSchema`.\n * @since 1.0.0\n */\nexport declare type PushNotification = PushNotificationSchema;\n/**\n * @deprecated Use `ActionPerformed`.\n * @since 1.0.0\n */\nexport declare type PushNotificationActionPerformed = ActionPerformed;\n/**\n * @deprecated Use `DeliveredNotifications`.\n * @since 1.0.0\n */\nexport declare type PushNotificationDeliveredList = DeliveredNotifications;\n/**\n * @deprecated Use `Token`.\n * @since 1.0.0\n */\nexport declare type PushNotificationToken = Token;\n\nexport type MethodNames =\n  | 'showCallkitIncoming'\n  | 'checkIsVersionOk'\n  | 'sendPendingAcceptEvent'\n  | 'showCallkitIncomingSilently'\n  | 'showMissCallNotification'\n  | 'startCall'\n  | 'muteCall'\n  | 'holdCall'\n  | 'isMuted'\n  | 'endCall'\n  | 'callConnected'\n  | 'endAllCalls'\n  | 'activeCalls'\n  | 'getDevicePushTokenVoIP'\n  | 'silenceEvents'\n  | 'requestNotificationPermission'\n  | 'requestFullIntentPermission'\n  | 'hideCallkitIncoming'\n  | 'endNativeSubsystemOnly'\n  | 'setAudioRoute';\n\nexport type Events =\n  | 'com.hiennv.flutter_callkit_incoming.DID_UPDATE_DEVICE_PUSH_TOKEN_VOIP'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_INCOMING'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_START'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_ACCEPT'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_DECLINE'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_ENDED'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TIMEOUT'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_CALLBACK'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_HOLD'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_MUTE'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_DMTF'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_GROUP'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_AUDIO_SESSION'\n  | 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_CUSTOM';\n\n// export enum Events {\n//   actionDidUpdateDevicePushTokenVoip = 'com.hiennv.flutter_callkit_incoming.DID_UPDATE_DEVICE_PUSH_TOKEN_VOIP',\n//   actionCallIncoming = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_INCOMING',\n//   actionCallStart = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_START',\n//   actionCallAccept = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_ACCEPT',\n//   actionCallDecline = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_DECLINE',\n//   actionCallEnded = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_ENDED',\n//   actionCallTimeout = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TIMEOUT',\n//   actionCallCallback = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_CALLBACK',\n//   actionCallToggleHold = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_HOLD',\n//   actionCallToggleMute = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_MUTE',\n//   actionCallToggleDmtf = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_DMTF',\n//   actionCallToggleGroup = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_GROUP',\n//   actionCallToggleAudioSession = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_TOGGLE_AUDIO_SESSION',\n//   actionCallCustom = 'com.hiennv.flutter_callkit_incoming.ACTION_CALL_CUSTOM',\n// }\n\nexport interface NotificationParams {\n  id?: number;\n  showNotification?: boolean;\n  subtitle?: string;\n  callbackText?: string;\n  isShowCallback: boolean;\n  int?: number;\n}\n\nexport interface IOSParams {\n  /// App's Icon. using for display inside Callkit(iOS)\n  iconName?: string;\n\n  /// Type handle call `generic`, `number`, `email`\n  handleType?: string;\n  supportsVideo?: boolean;\n  maximumCallGroups?: number;\n  maximumCallsPerCallGroup?: number;\n  audioSessionMode?: string;\n  audioSessionActive?: boolean;\n  audioSessionPreferredSampleRate?: number; // Float value\n  audioSessionPreferredIOBufferDuration?: number; // Float value\n  configureAudioSession?: boolean;\n  supportsDTMF?: boolean;\n  supportsHolding?: boolean;\n  supportsGrouping?: boolean;\n  supportsUngrouping?: boolean;\n\n  /// Add file to root project xcode /ios/Runner/Ringtone.caf and Copy Bundle Resources(Build Phases) -> value: \"Ringtone.caf\"\n  ringtonePath?: string;\n}\n\nexport interface AndroidParams {\n  /// Using custom notifications.\n  isCustomNotification?: boolean;\n\n  /// Using custom notification small on some devices clipped out in android.\n  isCustomSmallExNotification?: boolean;\n\n  /// Show logo app inside full screen.\n  isShowLogo?: boolean;\n\n  /// Show call id app inside full screen.\n  isShowCallID?: boolean;\n\n  /// File name ringtone, put file into /android/app/src/main/res/raw/ringtone_default.pm3 -> value: `ringtone_default.pm3`\n  ringtonePath?: string;\n\n  /// Incoming call screen background color.\n  backgroundColor?: string;\n\n  /// Using image background for Incoming call screen. example: http://... https://... or \"assets/abc.png\"\n  backgroundUrl?: string;\n\n  /// Color used in button/text on notification.\n  actionColor?: string;\n\n  /// Color used for the text in the full screen notification\n  textColor?: string;\n\n  /// Notification channel name of incoming call.\n  incomingCallNotificationChannelName?: string;\n\n  /// Notification channel name of missed call.\n  missedCallNotificationChannelName?: string;\n\n  /// Show full locked screen.\n  isShowFullLockedScreen?: boolean;\n\n  /// Caller is important to the user of this device with regards to how frequently they interact.\n  /// https://developer.android.com/reference/androidx/core/app/Person#isImportant()\n  isImportant?: boolean;\n\n  /// Used primarily to identify automated tooling.\n  /// https://developer.android.com/reference/androidx/core/app/Person#isBot()\n  isBot?: boolean;\n}\n\nexport interface CallKitParams {\n  id?: string;\n  nameCaller?: string;\n  appName?: string;\n  avatar?: string;\n  handle?: string;\n  type?: number;\n  isOnHold?: boolean;\n  isMuted?: boolean;\n  normalHandle?: number;\n  duration?: number;\n  textAccept?: string;\n  textDecline?: string;\n  textMissedCall?: string;\n  textCallback?: string;\n  rationaleMessagePermission?: string;\n  postNotificationMessageRequired?: string;\n  missedCallNotification?: NotificationParams;\n  extra?: { [key: string]: any };\n  headers?: { [key: string]: any };\n  android?: AndroidParams;\n  ios?: IOSParams;\n}\n\nexport type Responses =\n  | void\n  | { isMuted: boolean }\n  | { calls: CallKitParams[] }\n  | { isVersionOk: boolean }\n  | { devicePushTokenVoIP: string };\n\nexport enum SdpType {\n  offer = 'offer',\n  prAnswer = 'prAnswer',\n  answer = 'answer',\n  rollback = 'rollback',\n}\n\nexport interface SessionDescription {\n  type: SdpType;\n  sdp: string;\n}\n\nexport interface FlutterCallkitIncomingPlugin extends PushNotificationsPlugin {\n  unregisterProximityListener(): Promise<{ status: string }>;\n  toggleSpeaker({\n    useSpeaker,\n  }: {\n    useSpeaker: boolean;\n  }): Promise<{ isSpeakerOn: boolean }>;\n  isSpeakerOn(): Promise<{ isSpeakerOn: boolean }>;\n  toggleMicrophone({\n    mute,\n  }: {\n    mute: boolean;\n  }): Promise<{ isMicrophoneMuted: boolean }>;\n  isMicrophoneMuted(): Promise<{ isMicrophoneMuted: boolean }>;\n  createAnswer(): Promise<SessionDescription>;\n  createPeer({\n    iceServers,\n  }: {\n    iceServers: [\n      {\n        urls: string[];\n        username: string;\n        credential: string;\n      },\n    ];\n  }): Promise<{ status: string }>;\n  createOffer({\n    iceServers,\n  }: {\n    iceServers: [\n      {\n        urls: string[];\n        username: string;\n        credential: string;\n      },\n    ];\n  }): Promise<SessionDescription>;\n  setRemoteSdp({\n    sdp,\n    type,\n    iceServers,\n  }: {\n    sdp: string;\n    type: string;\n    iceServers?: [\n      {\n        urls: string[];\n        username: string;\n        credential: string;\n      },\n    ];\n  }): Promise<{ status: string }>;\n  setRemoteIceCandidate({\n    sdpMLineIndex,\n    sdpMid,\n    candidate,\n  }: RTCIceCandidateInit): Promise<{ status: string }>;\n  closePeerConnection(): Promise<{ status: string }>;\n  getPeerConnectionStatus(): Promise<{ status: string }>;\n  getRemoteDescriptionStatus(): Promise<{ status: string }>;\n  doMethod(options: {\n    options: string;\n    methodName: MethodNames;\n    parsedOptions: CallKitParams;\n  }): Promise<Responses>;\n}\n"]}